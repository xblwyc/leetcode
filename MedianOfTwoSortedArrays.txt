class Solution {
public:
    double findMedianSortedArrays(int A[], int m, int B[], int n) {
        double Amed = 0;
        double Bmed = 0;
        if(m %2 == 0)
        Amed = (double)(A[m/2] + A[m/2 - 1])/2;
        else
        Amed = A[m/2];
        if(n %2 == 0)
        Bmed = (double)(B[n/2] + B[n/2 - 1])/2;
        else
        Bmed = B[n/2];
        if(m == 0)
        return Bmed;
        if(n == 0)
        return Amed;
        if(Amed == Bmed)
        return Amed;
       if(m == 1){
			if(n >= 2)
			{
        if(n % 2 == 0)
        {
            if(Amed < B[n/2 -1])
            return B[n/2 - 1];
            else if (Amed > B[n/2])
            return B[n/2];
            else
            return Amed;
        }
        else
        {
            if(Amed > B[n/2 + 1])
            return (double)(B[n/2] + B[n/2 + 1]) / 2;
            else if (Amed < B[n/2 - 1])
            return (double)(B[n/2] + B[n/2 - 1]) / 2;
            else
            return (B[n/2] + Amed) / 2;
        }
			}
			else
				return (Amed + Bmed) /2;
        }
        if(n == 1)
        {
        if(m % 2 == 0)
        {
            if(Bmed < A[m/2 - 1])
            return A[m/2 - 1];
            else if (Bmed > A[m/2])
            return A[m/2];
            else
            return Bmed;
        }
        else
        {
            if(Bmed > A[m/2 + 1])
            return (double)(A[m/2] + A[m/2 + 1]) / 2;
            else if (Bmed < A[m/2 - 1])
            return (double)(A[m/2] + A[m/2 - 1]) / 2;
            else
            return (A[m/2] + Bmed) / 2;
        }
        }
        if(m == 2)
        {
            if(n % 2 == 1)
            {
                if(A[0] <= Bmed && A[1] >= Bmed)
                return Bmed;
                else if(A[0] <= Bmed && A[1] <= Bmed && A[1] >= B[n/2 - 1])
                return A[1];
                else if (A[0] >= Bmed && A[1] >= Bmed && A[0] <= B[n/2 + 1])
                return A[0];
                else if (A[0] >= B[n/2 + 1])
                return B[n/2 + 1];
                else if (A[1] <= B[n/2 - 1])
                return B[n/2 - 1];
            }
            else
            {
                if(A[0] <= B[n/2 - 1] && A[1] >= B[n/2])
                return Bmed;
                else if (A[0] >= B[n/2 - 1] && A[1] >= B[n / 2] && ((n>=4 && A[0] <= B[n/2 + 1]) || n < 4))
                        return (double)(A[0] + B[n/2]) / 2;
                else if(A[1] <= B[n/2] && A[0] <= B[n/2 - 1] && ((n>=4 && A[1] >= B[n/2 - 2]) || n < 4))
                return (double)(B[n / 2 - 1] + A[1]) / 2;
                else if(A[0] >= B[n/2 - 1] && A[1] <= B[n/2])
                return Amed;
                else if((n >= 4 && A[1] <= B[n / 2 -2] ))
                return (double)(B[n/2 -2] + B[n/2 - 1]) /2;
                else if (n >= 4 &&A[0] >= B[n / 2 + 1])
                return (double)(B[n/2] + B[n/2 +1]) / 2;
            }
        }
        if(n == 2)
        {
            if(m % 2 == 1)
            {
                if(B[0] <= Amed && B[1] >= Amed)
                return Amed;
                else if(B[0] <= Amed && B[1] <= Amed && B[1] >= A[m/2 - 1])
                return B[1];
                else if (B[0] >= Amed && B[1] >= Amed && B[0] <= A[m/2 + 1])
                return B[0];
                else if (B[0] >= A[m/2 + 1])
                return A[m/2 + 1];
                else if (B[1] <= A[m/2 - 1])
                return A[m/2 - 1];
            }
            else
            {
                if(B[0] <= A[m/2 - 1] && B[1] >= A[m/2])
                return Amed;
                else if (B[0] >= A[m/2 - 1] && B[1] >= A[m / 2]&& ((m >= 4 && B[0] <= A[m/2 + 1]) || m < 4))
                return (double)(B[0] + A[m/2]) / 2;
                else if(B[1] <= A[m/2] && B[0] <= A[m/2 - 1] && ((m>=4 && B[1] >= A[m/2 - 2]) || m < 4) )
                return (double)(A[m / 2 - 1] + B[1]) / 2;
                else if(B[0] >= A[m/2 - 1] && B[1] <= A[m/2])
                return Bmed;
                else if(m>=4 && B[1] <= A[m / 2 -2])
                return (double)(A[m/2 -2] + A[m/2 - 1]) /2;
                else if (m>=4 && B[0] >= A[m / 2 + 1])
                return (double)(A[m/2] + A[m/ 2 +1]) / 2;
            }
        }
        
        if(Amed < Bmed)
        {
            int temp = (m > n)? n : m;
            temp = (temp - 1) / 2;
            return findMedianSortedArrays(&A[temp], m - temp, B, n - temp);
        }
        else
        {
            int temp = (m > n)? n : m;
            temp = (temp - 1) / 2;
            return findMedianSortedArrays(A, m - temp, &B[temp], n- temp);
        }
        
    }
};